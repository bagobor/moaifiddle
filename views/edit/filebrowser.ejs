<script id="fileBrowserTemplate" type="text/ractive">
    <div id="fileBrowser">
        <ul>
         {{# fileList( files ) }}
             <li style="padding-left: {{depth * 5}}px; display:{{ visible(parent) ? "":"none" }}; "
                 class="{{dir ? "dir" :"file"}} {{closed(fullPath(this)) ? "closed": ""}}"
                 on-click="{{dir ? "toggle": "open"}}" data-path="{{fullPath(this)}}"
                 ><i class="fa"></i> {{name}}</li>
         {{/ end file list}}
        </ul>
    </div>
</script>

<script language="javascript">
  function createFileBrowser() {
      var fileBrowser = new Ractive({
          el: 'fileBrowserContainer',
          template: '#fileBrowserTemplate',
          data: {

              isClosed: [],
              files: [
                  { name: "/src/test.lua", contents: "blahblah"},
                  { name: "/root.lua", contents: "blahblah"},
                  { name: "/src/sub/test.lua", contents: "blahblah"},
                  { name: "/src/zed/z.lua", contents: "blahblah" }
              ],

              fullPath: function(fileInfo) {
                  return fileInfo.parent+ (fileInfo.parent == '/' ? '': '/')+fileInfo.name;
              },
              closed: function(path) {
                  var exp = this.get('isClosed');
                  return exp.indexOf(path) >= 0;
              },
              visible: function(parentPath) {
                 if (parentPath == "/") return true;
                 var parent= parentPath.split("/");
                  parent.pop();
                  parent = parent.join("/") || "/";
                 return (!this.data.closed.bind(this)(parentPath)) && this.data.visible.bind(this)(parent);
              },
              fileList: function (files) {
                  var fs = [];
                  files = files.map(function(f) {
                      var parts = f.name.split("/").slice(1);
                      f.parts = parts;
                      f.path = parts.slice(0,-1);
                      f.filename = parts.slice().pop();
                      return f;
                  });
                  files = files.sort(function (a, b) {
                      var adirs = a.path;
                      var bdirs = b.path;
                      var times = Math.min(a.dirs, b.dirs);
                      for (var i = 0; i < times; i++) {
                          if (a.parts[i] != b.parts[i]) {
                              return a.parts[i] < b.parts[i] ? -1 : 1;
                          }
                      }
                      if (adirs.length == bdirs.length) {
                        return a.filename < b.filename ? -1 : 1;
                      } else {
                          return adirs.length < bdirs.length ? 1:-1;
                      }
                  });
                  var lastpath = ["zzzzzzzzzzzzdfasdfasdfzxfsadfasdfasdfasdf"];
                  for(var i = 0; i < files.length; i++) {
                     var f = files[i];
                      var times = Math.min(lastpath.length, f.path.length);
                      var currentpath = "/";
                      var pushrest = false;
                      for(var j = 0; j < times; j++ ) {

                          if(f.path[j] != lastpath[j]) {
                              var start = j;
                              for (var k=start; k < f.path.length; k++) {
                                  fs.push({idx: i, name: f.path[k], depth: k, dir: true, parent: currentpath});
                                  currentpath = currentpath + (currentpath == '/' ? '': '/') + f.path[k];
                              }
                              break;
                          }
                          currentpath = currentpath + (currentpath == '/' ? '': '/')+f.path[j];
                      }
                      fs.push({idx: i, name: f.filename, depth: f.path.length, dir: false, parent: currentpath})

                     lastpath = f.path;

                  }
                  return fs;
              }
          }
      });
      fileBrowser.on("open", function() {console.log("open")});
      fileBrowser.on("toggle", function(event) {
        var path = event.original.target.getAttribute("data-path");
        var idx = this.get('isClosed').indexOf(path);

        if (idx >= 0) {
            this.get('isClosed').splice(idx,1);
        } else {
            this.get('isClosed').push(path);
        }


      });

      return fileBrowser;
  }
</script>